# 
# My zsh prompt
#

# How I want it to look (| representscursor position)

# Short curretn dirdir
#
# <user@host:~/myconfig/dotfiles> |
#
# Long current dir
#
# <user@host                     /usr/src/local/xft-emacs/emacs-multi-tty/src>
# 

function zsh-prompt-fancy() {
    [[ ! -z $TERM && $TERM != dumb && $TERM != emacs ]]
}

function zsh-prompt-precmd {
    emulate -L zsh
    
    PR_MSG=
    if ! zsh-prompt-fancy ; then
        return 
    fi
    setopt extended_glob
    setopt prompt_subst
    local TERMWIDTH
    (( TERMWIDTH = ${COLUMNS} - 1 ))

    ###
    # Truncate the path if it's too long.
    
    PR_FILLBAR=""
    PR_PWDLEN=""
    PR_JOB=
    
    local promptsize=${#${(%):---(%n@%m:%l)---()--}}
    local pwdsize=${#${(%):-%~}}
    
    if [[ "$promptsize + $pwdsize" -gt $TERMWIDTH ]]; then
	((PR_PWDLEN=$TERMWIDTH - $promptsize))
    else
	PR_FILLBAR="\${(l.(($TERMWIDTH - ($promptsize + $pwdsize)))..${PR_HBAR}.)}"
    fi


    ###
    # Get APM info.

    PR_APM=
#    if which ibam > /dev/null; then
#	PR_APM_RESULT=`ibam --percentbattery`
#    elif which apm > /dev/null; then
#	PR_APM_RESULT=`apm`
#    fi
}

zsh-prompt-preexec () {
    emulate -L zsh
    PR_MSG=
    if ! zsh-prompt-fancy ; then
        return 
    fi
    setopt extended_glob
    setopt prompt_subst
    if [[ $TERM == screen* || $TERM == xterm* ]]; then
        local CMD
	CMD=${1-[(wr)^(*=*|sudo|-*)]}
        local -a cmd
        cmd=($=CMD)
        CMD=$cmd[1,4]
        PR_JOB="($CMD) "
        if [[ ! $PR_JOB == *xdotool* ]] ; then
            echo -nE ${(%e)PR_TITLEBAR}
        fi
    fi
}

setprompt () {
    emulate -L zsh
    add-hook precmd_hook zsh-prompt-precmd
    add-hook preexec_hook zsh-prompt-preexec
    if zsh-prompt-fancy ; then
        setopt extended_glob
        setopt prompt_subst
    ###
    # Need this so the prompt will work.
        
        setopt prompt_subst
    ###
    # See if we can use colors.

        autoload colors zsh/terminfo
        if [[ "$terminfo[colors]" -ge 8 ]]; then
	    colors
        fi
        for color in RED GREEN YELLOW BLUE MAGENTA CYAN WHITE; do
	    eval PR_$color='%{$terminfo[bold]$fg[${(L)color}]%}'
	    eval PR_LIGHT_$color='%{$fg[${(L)color}]%}'
	    (( count = $count + 1 ))
        done
        PR_NO_COLOUR="%{$terminfo[sgr0]%}"


    ###
    # See if we can use extended characters to look nicer.
        
        typeset -A altchar
        set -A altchar ${(s..)terminfo[acsc]}
        PR_SET_CHARSET="%{$terminfo[enacs]%}"
        PR_SHIFT_IN="%{$terminfo[smacs]%}"
        PR_SHIFT_OUT="%{$terminfo[rmacs]%}"
        PR_HBAR=${altchar[q]:--}
        PR_ULCORNER=${altchar[l]:--}
        PR_LLCORNER=${altchar[m]:--}
        PR_LRCORNER=${altchar[j]:--}
        PR_URCORNER=${altchar[k]:--}

        PR_HOST=$HOST[1,4]
        PR_HOST2=$HOST

        
    ###
    # Decide if we need to set titlebar text.

        case $TERM in
	    xterm*)
	    #PR_TITLEBAR=$'%{\e]0;%(!.-=*[ROOT]*=- | .)%n@%m:%~ | ${COLUMNS}x${LINES} | %y\a%}'
	        PR_TITLEBAR=$'%{\e]0;${PR_JOB}%~%(!.#.) - ${PR_HOST} ${COLUMNS}x${LINES}\a%}'
	        ;;
	    screen*)
	    #PR_TITLEBAR=$'%{\e_screen \005 (\005t) | %(!.-=[ROOT]=- | .)%n@%m:%~ | ${COLUMNS}x${LINES} | %y\e\\%}'
	        PR_TITLEBAR=$'%{\e_${PR_JOB}%~%(!.#.) - ${PR_HOST2}/\005 ${COLUMNS}x${LINES}\e\\%}'
	        ;;
	    *)
	        PR_TITLEBAR=''
	        ;;
        esac
        
        
    ###
    # Decide whether to set a screen title
    #if [[ "$TERM" == "screen" ]]; then
    #  PR_STITLE=$'%{\ekzsh\e\\%}'
    #else
    #  PR_STITLE=''
    #fi
        
        
    ###
    # APM detection
    PR_APM=
        
#        if which ibam > /dev/null; then
#	    PR_APM='$PR_RED${${PR_APM_RESULT[(f)1]}[(w)-2]}%%(${${PR_APM_RESULT[(f)3]}[(w)-1]})$PR_LIGHT_BLUE:'
#        elif which apm > /dev/null; then
#	    PR_APM='$PR_RED${PR_APM_RESULT[(w)5,(w)6]/\% /%%}$PR_LIGHT_BLUE:'
#        else
#	    PR_APM=''
#        fi
        
        
    ###
    # Finally, the prompt.

        PROMPT='$PR_SET_CHARSET$PR_STITLE${(e)PR_TITLEBAR}\
$PR_CYAN$PR_SHIFT_IN$PR_ULCORNER$PR_BLUE$PR_HBAR$PR_SHIFT_OUT(\
$PR_GREEN%(!.%SROOT%s.%n)$PR_GREEN@%m:%l\
$PR_BLUE)$PR_SHIFT_IN$PR_HBAR$PR_CYAN$PR_HBAR${(e)PR_FILLBAR}$PR_BLUE$PR_HBAR$PR_SHIFT_OUT(\
$PR_MAGENTA%$PR_PWDLEN<...<%~%<<\
$PR_BLUE)$PR_SHIFT_IN$PR_HBAR$PR_CYAN$PR_URCORNER$PR_SHIFT_OUT\

$PR_CYAN$PR_SHIFT_IN$PR_LLCORNER$PR_BLUE$PR_HBAR$PR_SHIFT_OUT(\
%(?..$PR_LIGHT_RED%?$PR_BLUE:)\
${(e)PR_APM}$PR_YELLOW%D{%H:%M}\
$PR_LIGHT_BLUE:%(!.$PR_RED.$PR_WHITE)%#$PR_BLUE)$PR_SHIFT_IN$PR_HBAR$PR_SHIFT_OUT\
$PR_CYAN$PR_SHIFT_IN$PR_HBAR$PR_SHIFT_OUT\
$PR_NO_COLOUR '

        RPROMPT=' $PR_CYAN$PR_SHIFT_IN$PR_HBAR$PR_BLUE$PR_HBAR$PR_SHIFT_OUT\
$PR_MSG($PR_YELLOW%D{%a,%b%d}$PR_BLUE)$PR_SHIFT_IN$PR_HBAR$PR_CYAN$PR_LRCORNER$PR_SHIFT_OUT$PR_NO_COLOUR'

        PS2='$PR_CYAN$PR_SHIFT_IN$PR_HBAR$PR_SHIFT_OUT\
$PR_BLUE$PR_SHIFT_IN$PR_HBAR$PR_SHIFT_OUT(\
$PR_LIGHT_GREEN%_$PR_BLUE)$PR_SHIFT_IN$PR_HBAR$PR_SHIFT_OUT\
$PR_CYAN$PR_SHIFT_IN$PR_HBAR$PR_SHIFT_OUT$PR_NO_COLOUR '
    else
        # non fancy prompt, default one
        PROMPT='%n@%m:%~> '
    fi
}

setopt prompt_subst
setprompt

function reload-prompt() {
    . ~/myconfig/dotfiles/zsh-prompt
}
